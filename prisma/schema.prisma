// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
}

model ImageType {
  id        Int      @id @default(autoincrement())
  typeName  String
  createdAt DateTime @default(now())
  images    Image[]
}

model Image {
  id          Int       @id @default(autoincrement())
  mainText    String
  subText     String?
  imageTypeId Int
  imageType   ImageType @relation(fields: [imageTypeId], references: [id])
  link        String?
  bg_img      String?
  createdAt   DateTime  @default(now())
}

model Courses {
  id              Int       @id @default(autoincrement())
  name            String
  programOverview String
  quiz            String?
  skills          String[]
  price           Int?
  isOpened        Boolean   @default(false)
  expireDate      DateTime?
  duration        String
  location        String
  level           String
  createdAt       DateTime  @default(now())
  image           String?
}

model StudentReview {
  id                 Int              @id @default(autoincrement())
  name               String
  batch              String
  educationPartnerId Int
  educationPartner   EducationPartner @relation(fields: [educationPartnerId], references: [id])
  review             String?
  createdAt          DateTime         @default(now())
}

enum PartnerType {
  INSTITUTE
  UNIVERSITY
  COLLEGE
  NOTHING
}

model EducationPartner {
  id            Int             @id @default(autoincrement())
  overview      String
  bg_img        String?
  logo_img      String?
  location      String
  foundedDate   String?
  partnerType   PartnerType     @default(NOTHING)
  createdAt     DateTime        @default(now())
  StudentReview StudentReview[]
}

model Inquiry {
  id          Int      @id @default(autoincrement())
  name        String
  email       String
  phone       String?
  description String
  createdAt   DateTime @default(now())
}

model HappeningType {
  id        Int         @id @default(autoincrement())
  typeName  String
  createdAt DateTime    @default(now())
  Happening Happening[]
}

model Happening {
  id              Int            @id @default(autoincrement())
  title           String
  description     String
  happeningTypeId Int
  happeningType   HappeningType  @relation(fields: [happeningTypeId], references: [id])
  mainImage       String
  albumId         Int
  album           HappeningAlbum @relation(fields: [albumId], references: [id])
  createdAt       DateTime       @default(now())
}

model HappeningAlbum {
  id         Int              @id @default(autoincrement())
  createdAt  DateTime         @default(now())
  images     HappeningImage[]
  happenings Happening[]
}

model HappeningImage {
  id        Int            @id @default(autoincrement())
  albumId   Int
  album     HappeningAlbum @relation(fields: [albumId], references: [id])
  image     String
  createdAt DateTime       @default(now())
}
